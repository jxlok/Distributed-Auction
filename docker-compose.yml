version: '3'
networks:
    auction_system:
        driver: bridge
volumes:
    mysql-data:
services:
    bid_service_nginx:
        image: nginx:stable-alpine3.17-slim
        container_name: bid_service_nginx
        hostname: bid_service_nginx
        restart: always
        ports:
            - "8000:80"
        volumes:
            - ./nginx.conf:/etc/nginx/conf.d/default.conf
        networks:
            - auction_system

    bid_service_1:
        build:
            context: bidservice
            dockerfile: ./Dockerfile
        container_name: bid_service_1
        hostname: bid_service_1
        restart: unless-stopped
        networks:
            - auction_system

    bid_service_2:
        build:
            context: bidservice
            dockerfile: ./Dockerfile
        container_name: bid_service_2
        hostname: bid_service_2
        restart: unless-stopped
        networks:
            - auction_system

    bid_service_3:
        build:
            context: bidservice
            dockerfile: ./Dockerfile
        container_name: bid_service_3
        hostname: bid_service_3
        restart: unless-stopped
        networks:
            - auction_system

    auction_service:
        build:
            context: auctionservice
            dockerfile: ./Dockerfile
        container_name: auction_service
        hostname: auction_service
        restart: unless-stopped
        networks:
            - auction_system
        environment:
            MYSQL_HOST: mysql
            MYSQL_PORT: 3306
            MYSQL_USER: root
            MYSQL_PASSWORD: root_password
            MYSQL_DATABASE: auction_db
        depends_on:
            - mysql

    mysql:
        image: mysql:latest
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: root_password
        volumes:
            - "mysql-data:/var/lib/mysql"
            - "./init/:/docker-entrypoint-initdb.d/"
        networks:
            - auction_system

    #   from Kafka Docker Single-node official example:
#   https://github.com/apache/kafka/blob/trunk/docker/examples/jvm/single-node/plaintext/docker-compose.yml

    broker:
        image: apache/kafka:3.7.0
        hostname: broker
        container_name: broker
        restart: always
        ports:
            - '9092:9092'
        expose:
            - '19092'
        networks:
            - auction_system
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
            KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
            KAFKA_PROCESS_ROLES: 'broker,controller'
            KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
            KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
            KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
            KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
            CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'


    init_kafka:
        image: apache/kafka:3.7.0
        hostname: init_kafka
        container_name: init_kafka
        restart: 'no'
        depends_on:
            - broker
        entrypoint: [ 'sh', '-c' ]
        networks:
            - auction_system
        command: |
            "
            # blocks until kafka is reachable
            /opt/kafka/bin/kafka-topics.sh --bootstrap-server broker:19092 --list
            
            echo -e 'Creating kafka topics'
            /opt/kafka/bin/kafka-topics.sh --bootstrap-server broker:19092 --create --if-not-exists --topic pawn.auction.bids --replication-factor 1 --partitions 1
            /opt/kafka/bin/kafka-topics.sh --bootstrap-server broker:19092 --create --if-not-exists --topic pawn.auction.updates --replication-factor 1 --partitions 1
            
            echo -e 'Successfully created the following topics:'
            /opt/kafka/bin/kafka-topics.sh --bootstrap-server broker:19092 --list
            "
